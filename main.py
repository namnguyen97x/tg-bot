import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai
from dotenv import load_dotenv
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import json

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configure Gemini API
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not GEMINI_API_KEY or not TELEGRAM_BOT_TOKEN:
    logger.error("Missing required environment variables")
    exit(1)

# Initialize Gemini with stable API (Python 3.8 compatible)
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

class TelegramGeminiBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Thi·∫øt l·∫≠p c√°c handler cho bot"""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        
        # Message handler
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /start"""
        welcome_message = """
ü§ñ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Bot AI powered by Gemini!

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
‚úÖ Tr·∫£ l·ªùi c√¢u h·ªèi
‚úÖ Gi·∫£i th√≠ch kh√°i ni·ªám
‚úÖ H·ªó tr·ª£ h·ªçc t·∫≠p
‚úÖ S√°ng t·∫°o n·ªôi dung
‚úÖ V√† nhi·ªÅu vi·ªác kh√°c!

G·ª≠i tin nh·∫Øn b·∫•t k·ª≥ ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán!

C√°c l·ªánh c√≥ s·∫µn:
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p
/clear - X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i
        """
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /help"""
        help_message = """
üìñ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot AI**

**C√°c l·ªánh:**
/start - Kh·ªüi ƒë·ªông bot
/help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y
/clear - X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i

**C√°ch s·ª≠ d·ª•ng:**
- G·ª≠i b·∫•t k·ª≥ tin nh·∫Øn n√†o ƒë·ªÉ h·ªèi AI
- Bot s·∫Ω tr·∫£ l·ªùi d·ª±a tr√™n c√¥ng ngh·ªá Gemini AI
- B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ m·ªçi ch·ªß ƒë·ªÅ

**V√≠ d·ª•:**
"Gi·∫£i th√≠ch v·ªÅ tr√≠ tu·ªá nh√¢n t·∫°o"
"Vi·∫øt m·ªôt b√†i th∆° v·ªÅ m√πa thu"
"H∆∞·ªõng d·∫´n n·∫•u ph·ªü"

üî• **Tip:** Bot c√≥ th·ªÉ nh·ªõ ng·ªØ c·∫£nh cu·ªôc h·ªôi tho·∫°i!
        """
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªánh /clear"""
        # Clear conversation context if needed
        context.user_data.clear()
        await update.message.reply_text("‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i. B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi!")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ user"""
        user_message = update.message.text
        user_name = update.message.from_user.first_name
        
        logger.info(f"Message from {user_name}: {user_message}")
        
        try:
            # Hi·ªÉn th·ªã typing indicator
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # T·∫°o prompt v·ªõi context
            prompt = f"""
            B·∫°n l√† m·ªôt AI assistant th√¥ng minh v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch chi ti·∫øt, 
            ch√≠nh x√°c v√† d·ªÖ hi·ªÉu. S·ª≠ d·ª•ng ti·∫øng Vi·ªát ƒë·ªÉ tr·∫£ l·ªùi.
            
            C√¢u h·ªèi c·ªßa {user_name}: {user_message}
            """
            
            # G·ªçi Gemini API v·ªõi syntax ·ªïn ƒë·ªãnh Python 3.8
            response = model.generate_content(prompt)
            
            if response.text:
                # Chia nh·ªè tin nh·∫Øn n·∫øu qu√° d√†i (Telegram limit: 4096 chars)
                if len(response.text) > 4000:
                    chunks = [response.text[i:i+4000] for i in range(0, len(response.text), 4000)]
                    for chunk in chunks:
                        await update.message.reply_text(chunk)
                else:
                    await update.message.reply_text(response.text)
            else:
                await update.message.reply_text("Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y. Vui l√≤ng th·ª≠ l·∫°i!")
                
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await update.message.reply_text(
                "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau!"
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X·ª≠ l√Ω l·ªói to√†n c·ª•c"""
        logger.error(f"Update {update} caused error {context.error}")
    
    def run(self):
        """Ch·∫°y bot"""
        # Add error handler
        self.application.add_error_handler(self.error_handler)
        
        # Start the bot
        logger.info("Starting Telegram Gemini Bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health' or self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            health_data = {
                "status": "healthy",
                "service": "telegram-gemini-bot",
                "version": "1.0.0"
            }
            self.wfile.write(json.dumps(health_data).encode())
        else:
            self.send_response(404)
            self.end_headers()

    def log_message(self, format, *args):
        # Suppress HTTP server logs
        pass

def start_health_server():
    """Start health check server"""
    port = int(os.environ.get('PORT', 8080))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    logger.info(f"Health server starting on port {port}")
    server.serve_forever()

def main():
    """Main function"""
    logger.info("Initializing Telegram Gemini Bot...")
    
    # Start health check server in background
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    # Start bot
    bot = TelegramGeminiBot()
    bot.run()

if __name__ == '__main__':
    main() 